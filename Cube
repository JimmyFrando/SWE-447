/* 
	Author: Jimmy Frando
	File Name: Cube Object
	Date: 2/11/2016
	Description: This javascript file gives the code to create  a 3D cube using WebGL
*/

var Cube = 
{
	//object properties
	program : undefined,
	count : 8,
		positions : {
			values : new Float32Array([
				0.0, 0.0, 0,0,
				1.0, 0.0, 0.0,
				0.0, 1.0, 0.0,
				1.0, 1.0, 0.0,
				0.0, 0.0, 1.0,
				1.0, 0.0, 1.0,
				0.0, 1.0, 1.0,
				1.0, 1.0, 1.0
				]),

			numComponents : 3 // 3 componenets IE 3D coordinates
		},

		colors : {
			values : new Float32Array([
				1.0, 0.0, 1.0, 1.0,
				1.0, 0.0, 1.0, 1.0,
				1.0, 0.0, 1.0, 1.0,
				0.0, 1.0, 1.0, 1.0,
				0.0, 1.0, 1.0, 1.0,
				0.0, 1.0, 1.0, 1.0,
				1.0, 0.0, 0.0, 1.0,
				1.0, 0.0, 0.0, 1.0,
				]),

			numComponents : 3
		},

		indices : {
			values : new Unit16Array([ 0, 1, 3, 2, 4, 5, 7, 6])
		},

		init : function() 
		{
			//the code to initialize our object. This will be called from the main
			//JS file's init method. 

			//Once done listing indices, initialize object's shader program
			this.program = initShaders( gl, "Cube-vertex-shader", "Cube-fragment-shader" );

			//Create a vertex buffer for vertex positions
			this.positions.values.buffer = gl.createBuffer();
			gl.bindBuffer( gl.ARRAY_BUFFER, this.positions.values.buffer );
			gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( positions.values ), gl.STATIC_DRAW );

			//Create an indicies buffer for the indicies
			this.indices.values.buffer = gl.createBuffer();
			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, this.indices.values.buffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, new Uint16Array( indices.values ), gl.STATIC_DRAW );

			//Querys any vertex attribute locations from shader program
			this.positions.values.attribute = gl.getAttribLocation( this.program, "vPosition" );

		},

		draw : function () {
			// code to render our object including all of the necessary WebGL

			//Selects shader program we want to render (this one)
			gl.useProgram( this.program );

			//Binds and plumbs position attribute 
			gl.bindBuffer( gl.ARRAY_BUFFER, this.positions.values.buffer );
			gl.vertexAttribPointer( this.positions.values.attribute, this.positions.numComponents, gl.FLOAT, gl.FALSE, 0, 0 );
			gl.enableVertexAttrib( this.positions.values.attribute );
			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, this.indices.values.buffer );

			//Render Cube 
			var offset = 0; // start at beginning of buffer
			gl.drawElements( gl.TRIANGLE_STRIP, this.count, gl.UNSIGNED_SHORT, offset );

		},

